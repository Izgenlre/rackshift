<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.rackshift.mybatis.mapper.BareMetalRuleMapper">
  <resultMap id="BaseResultMap" type="io.rackshift.mybatis.domain.BareMetalRule">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="start_ip" jdbcType="VARCHAR" property="startIp" />
    <result column="end_ip" jdbcType="VARCHAR" property="endIp" />
    <result column="mask" jdbcType="VARCHAR" property="mask" />
    <result column="provider_id" jdbcType="VARCHAR" property="providerId" />
    <result column="sync_status" jdbcType="VARCHAR" property="syncStatus" />
    <result column="last_sync_timestamp" jdbcType="BIGINT" property="lastSyncTimestamp" />
    <result column="config" jdbcType="BIT" property="config" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="io.rackshift.mybatis.domain.BareMetalRule">
    <result column="credential_param" jdbcType="LONGVARCHAR" property="credentialParam" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, start_ip, end_ip, mask, provider_id, sync_status, last_sync_timestamp, 
    config
  </sql>
  <sql id="Blob_Column_List">
    credential_param
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="io.rackshift.mybatis.domain.BareMetalRuleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from bare_metal_rule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="io.rackshift.mybatis.domain.BareMetalRuleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bare_metal_rule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from bare_metal_rule
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from bare_metal_rule
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="io.rackshift.mybatis.domain.BareMetalRuleExample">
    delete from bare_metal_rule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="io.rackshift.mybatis.domain.BareMetalRule">
    insert into bare_metal_rule (id, name, start_ip, 
      end_ip, mask, provider_id, 
      sync_status, last_sync_timestamp, config, 
      credential_param)
    values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{startIp,jdbcType=VARCHAR}, 
      #{endIp,jdbcType=VARCHAR}, #{mask,jdbcType=VARCHAR}, #{providerId,jdbcType=VARCHAR}, 
      #{syncStatus,jdbcType=VARCHAR}, #{lastSyncTimestamp,jdbcType=BIGINT}, #{config,jdbcType=BIT}, 
      #{credentialParam,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="io.rackshift.mybatis.domain.BareMetalRule">
    insert into bare_metal_rule
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="startIp != null">
        start_ip,
      </if>
      <if test="endIp != null">
        end_ip,
      </if>
      <if test="mask != null">
        mask,
      </if>
      <if test="providerId != null">
        provider_id,
      </if>
      <if test="syncStatus != null">
        sync_status,
      </if>
      <if test="lastSyncTimestamp != null">
        last_sync_timestamp,
      </if>
      <if test="config != null">
        config,
      </if>
      <if test="credentialParam != null">
        credential_param,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="startIp != null">
        #{startIp,jdbcType=VARCHAR},
      </if>
      <if test="endIp != null">
        #{endIp,jdbcType=VARCHAR},
      </if>
      <if test="mask != null">
        #{mask,jdbcType=VARCHAR},
      </if>
      <if test="providerId != null">
        #{providerId,jdbcType=VARCHAR},
      </if>
      <if test="syncStatus != null">
        #{syncStatus,jdbcType=VARCHAR},
      </if>
      <if test="lastSyncTimestamp != null">
        #{lastSyncTimestamp,jdbcType=BIGINT},
      </if>
      <if test="config != null">
        #{config,jdbcType=BIT},
      </if>
      <if test="credentialParam != null">
        #{credentialParam,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="io.rackshift.mybatis.domain.BareMetalRuleExample" resultType="java.lang.Long">
    select count(*) from bare_metal_rule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bare_metal_rule
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.startIp != null">
        start_ip = #{record.startIp,jdbcType=VARCHAR},
      </if>
      <if test="record.endIp != null">
        end_ip = #{record.endIp,jdbcType=VARCHAR},
      </if>
      <if test="record.mask != null">
        mask = #{record.mask,jdbcType=VARCHAR},
      </if>
      <if test="record.providerId != null">
        provider_id = #{record.providerId,jdbcType=VARCHAR},
      </if>
      <if test="record.syncStatus != null">
        sync_status = #{record.syncStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.lastSyncTimestamp != null">
        last_sync_timestamp = #{record.lastSyncTimestamp,jdbcType=BIGINT},
      </if>
      <if test="record.config != null">
        config = #{record.config,jdbcType=BIT},
      </if>
      <if test="record.credentialParam != null">
        credential_param = #{record.credentialParam,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update bare_metal_rule
    set id = #{record.id,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      start_ip = #{record.startIp,jdbcType=VARCHAR},
      end_ip = #{record.endIp,jdbcType=VARCHAR},
      mask = #{record.mask,jdbcType=VARCHAR},
      provider_id = #{record.providerId,jdbcType=VARCHAR},
      sync_status = #{record.syncStatus,jdbcType=VARCHAR},
      last_sync_timestamp = #{record.lastSyncTimestamp,jdbcType=BIGINT},
      config = #{record.config,jdbcType=BIT},
      credential_param = #{record.credentialParam,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bare_metal_rule
    set id = #{record.id,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      start_ip = #{record.startIp,jdbcType=VARCHAR},
      end_ip = #{record.endIp,jdbcType=VARCHAR},
      mask = #{record.mask,jdbcType=VARCHAR},
      provider_id = #{record.providerId,jdbcType=VARCHAR},
      sync_status = #{record.syncStatus,jdbcType=VARCHAR},
      last_sync_timestamp = #{record.lastSyncTimestamp,jdbcType=BIGINT},
      config = #{record.config,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="io.rackshift.mybatis.domain.BareMetalRule">
    update bare_metal_rule
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="startIp != null">
        start_ip = #{startIp,jdbcType=VARCHAR},
      </if>
      <if test="endIp != null">
        end_ip = #{endIp,jdbcType=VARCHAR},
      </if>
      <if test="mask != null">
        mask = #{mask,jdbcType=VARCHAR},
      </if>
      <if test="providerId != null">
        provider_id = #{providerId,jdbcType=VARCHAR},
      </if>
      <if test="syncStatus != null">
        sync_status = #{syncStatus,jdbcType=VARCHAR},
      </if>
      <if test="lastSyncTimestamp != null">
        last_sync_timestamp = #{lastSyncTimestamp,jdbcType=BIGINT},
      </if>
      <if test="config != null">
        config = #{config,jdbcType=BIT},
      </if>
      <if test="credentialParam != null">
        credential_param = #{credentialParam,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="io.rackshift.mybatis.domain.BareMetalRule">
    update bare_metal_rule
    set name = #{name,jdbcType=VARCHAR},
      start_ip = #{startIp,jdbcType=VARCHAR},
      end_ip = #{endIp,jdbcType=VARCHAR},
      mask = #{mask,jdbcType=VARCHAR},
      provider_id = #{providerId,jdbcType=VARCHAR},
      sync_status = #{syncStatus,jdbcType=VARCHAR},
      last_sync_timestamp = #{lastSyncTimestamp,jdbcType=BIGINT},
      config = #{config,jdbcType=BIT},
      credential_param = #{credentialParam,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.rackshift.mybatis.domain.BareMetalRule">
    update bare_metal_rule
    set name = #{name,jdbcType=VARCHAR},
      start_ip = #{startIp,jdbcType=VARCHAR},
      end_ip = #{endIp,jdbcType=VARCHAR},
      mask = #{mask,jdbcType=VARCHAR},
      provider_id = #{providerId,jdbcType=VARCHAR},
      sync_status = #{syncStatus,jdbcType=VARCHAR},
      last_sync_timestamp = #{lastSyncTimestamp,jdbcType=BIGINT},
      config = #{config,jdbcType=BIT}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>