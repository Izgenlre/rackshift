<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.rackshift.mybatis.mapper.WorkflowMapper">
  <resultMap id="BaseResultMap" type="io.rackshift.mybatis.domain.Workflow">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="injectable_name" jdbcType="VARCHAR" property="injectableName" />
    <result column="friendly_name" jdbcType="VARCHAR" property="friendlyName" />
    <result column="event_type" jdbcType="VARCHAR" property="eventType" />
    <result column="brands" jdbcType="VARCHAR" property="brands" />
    <result column="settable" jdbcType="VARCHAR" property="settable" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="io.rackshift.mybatis.domain.Workflow">
    <result column="default_params" jdbcType="LONGVARCHAR" property="defaultParams" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, type, injectable_name, friendly_name, event_type, brands, settable, status, create_time
  </sql>
  <sql id="Blob_Column_List">
    default_params
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="io.rackshift.mybatis.domain.WorkflowExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from workflow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="io.rackshift.mybatis.domain.WorkflowExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from workflow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from workflow
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from workflow
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="io.rackshift.mybatis.domain.WorkflowExample">
    delete from workflow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="io.rackshift.mybatis.domain.Workflow">
    insert into workflow (id, type, injectable_name, 
      friendly_name, event_type, brands, 
      settable, status, create_time, 
      default_params)
    values (#{id,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, #{injectableName,jdbcType=VARCHAR}, 
      #{friendlyName,jdbcType=VARCHAR}, #{eventType,jdbcType=VARCHAR}, #{brands,jdbcType=VARCHAR}, 
      #{settable,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{createTime,jdbcType=BIGINT}, 
      #{defaultParams,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="io.rackshift.mybatis.domain.Workflow">
    insert into workflow
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="injectableName != null">
        injectable_name,
      </if>
      <if test="friendlyName != null">
        friendly_name,
      </if>
      <if test="eventType != null">
        event_type,
      </if>
      <if test="brands != null">
        brands,
      </if>
      <if test="settable != null">
        settable,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="defaultParams != null">
        default_params,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="injectableName != null">
        #{injectableName,jdbcType=VARCHAR},
      </if>
      <if test="friendlyName != null">
        #{friendlyName,jdbcType=VARCHAR},
      </if>
      <if test="eventType != null">
        #{eventType,jdbcType=VARCHAR},
      </if>
      <if test="brands != null">
        #{brands,jdbcType=VARCHAR},
      </if>
      <if test="settable != null">
        #{settable,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="defaultParams != null">
        #{defaultParams,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="io.rackshift.mybatis.domain.WorkflowExample" resultType="java.lang.Long">
    select count(*) from workflow
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update workflow
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.injectableName != null">
        injectable_name = #{record.injectableName,jdbcType=VARCHAR},
      </if>
      <if test="record.friendlyName != null">
        friendly_name = #{record.friendlyName,jdbcType=VARCHAR},
      </if>
      <if test="record.eventType != null">
        event_type = #{record.eventType,jdbcType=VARCHAR},
      </if>
      <if test="record.brands != null">
        brands = #{record.brands,jdbcType=VARCHAR},
      </if>
      <if test="record.settable != null">
        settable = #{record.settable,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=BIGINT},
      </if>
      <if test="record.defaultParams != null">
        default_params = #{record.defaultParams,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update workflow
    set id = #{record.id,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      injectable_name = #{record.injectableName,jdbcType=VARCHAR},
      friendly_name = #{record.friendlyName,jdbcType=VARCHAR},
      event_type = #{record.eventType,jdbcType=VARCHAR},
      brands = #{record.brands,jdbcType=VARCHAR},
      settable = #{record.settable,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=BIGINT},
      default_params = #{record.defaultParams,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update workflow
    set id = #{record.id,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      injectable_name = #{record.injectableName,jdbcType=VARCHAR},
      friendly_name = #{record.friendlyName,jdbcType=VARCHAR},
      event_type = #{record.eventType,jdbcType=VARCHAR},
      brands = #{record.brands,jdbcType=VARCHAR},
      settable = #{record.settable,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="io.rackshift.mybatis.domain.Workflow">
    update workflow
    <set>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="injectableName != null">
        injectable_name = #{injectableName,jdbcType=VARCHAR},
      </if>
      <if test="friendlyName != null">
        friendly_name = #{friendlyName,jdbcType=VARCHAR},
      </if>
      <if test="eventType != null">
        event_type = #{eventType,jdbcType=VARCHAR},
      </if>
      <if test="brands != null">
        brands = #{brands,jdbcType=VARCHAR},
      </if>
      <if test="settable != null">
        settable = #{settable,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="defaultParams != null">
        default_params = #{defaultParams,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="io.rackshift.mybatis.domain.Workflow">
    update workflow
    set type = #{type,jdbcType=VARCHAR},
      injectable_name = #{injectableName,jdbcType=VARCHAR},
      friendly_name = #{friendlyName,jdbcType=VARCHAR},
      event_type = #{eventType,jdbcType=VARCHAR},
      brands = #{brands,jdbcType=VARCHAR},
      settable = #{settable,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      default_params = #{defaultParams,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.rackshift.mybatis.domain.Workflow">
    update workflow
    set type = #{type,jdbcType=VARCHAR},
      injectable_name = #{injectableName,jdbcType=VARCHAR},
      friendly_name = #{friendlyName,jdbcType=VARCHAR},
      event_type = #{eventType,jdbcType=VARCHAR},
      brands = #{brands,jdbcType=VARCHAR},
      settable = #{settable,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>